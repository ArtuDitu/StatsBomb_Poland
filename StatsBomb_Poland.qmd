---
title: "StatsBomb_Poland"
author: "Artur Czeszumski"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
editor: visual
warning: false
results: hide
---

# Introduction

In this document I explore free StatsBomb data from World Cup 2022. I focus on the Polish national team. It is a first time I work with StatsBomb data. My goal is to explore the data and analyze the performance of the team.

It is a first time I work with data coming from football. Any feedback, comment, questions are always welcomed!

# Libraries

Here we load all libraries required to get the data and execute the code in this file.

```{r warning=FALSE}
library(tidyverse)
library(StatsBombR)
library(ggplot2)
library(SBpitch)
library(forcats)
library(RColorBrewer)
```

# Select the data

Select World Cup 2022 (id 43) and events related to only Polish team.

This script can be used to analyze other teams too.

```{r}
team_to_analyze = "Poland" # specify a team
d <- FreeCompetitions() %>% # load all competitions 
  filter(competition_id == 43 & season_name == 2022) %>% # select World Cup 2022
  FreeMatches() %>% # load all matches
  filter(home_team.home_team_name == team_to_analyze | away_team.away_team_name == team_to_analyze) %>% # select matchs of Polish team
  free_allevents(Parallel = T) %>% #load all events
  allclean() # calculate additional variables from existings ones (StatsBomb function to improve dataset)

# create a data frame that has info about opponents of chosen team
d_opponents <- FreeCompetitions() %>% # load all competitions
  filter(competition_id == 43 & season_name == 2022) %>% # select World Cup 2022
  FreeMatches() %>% # load all matches
  filter(home_team.home_team_name == team_to_analyze | away_team.away_team_name == team_to_analyze) %>%  # select matchs of Polish team
  select(match_id, match_date, home_team.home_team_name, away_team.away_team_name) %>%
  distinct() %>% # select only relevant variables
  mutate(opponent = case_when(home_team.home_team_name == team_to_analyze ~ away_team.away_team_name,
                              away_team.away_team_name == team_to_analyze ~ home_team.home_team_name)) # create a new variable that will contain info who was an opponent in each game

#merge both datasets to have info about the opponent for each event
d <- inner_join(d, d_opponents, by="match_id")
```

# Analysis

## Shots

First I look at all shots of Polish team.

Each color represents different opponent and the size of the shot location represents xG (statsbomb).

```{r}
create_Pitch(goaltype = "box") +
  geom_point(data = d[d$team.id == 789 & d$type.id == 16,], aes(x = location.x, y = location.y, 
                                 colour = opponent, 
                                 size = shot.statsbomb_xg,
                                 shape = factor(shot.outcome.name))) +
  ggtitle("Shots - Poland World Cup 2022") +
  labs(colour = "Opponent", shape = "Outcome") +
  guides(size = "none") +
  scale_colour_brewer(palette = "Dark2") +
  scale_y_reverse() +
  theme(plot.title = element_text(hjust = 1,vjust = -2),
        plot.background = element_rect(fill = "#F9F9F9"))
```

Then let's have a look who shot the most often and who accumalted the highest xG.

```{r}
d_shots_players <- d %>%
  filter(team.id == 789) %>% # select Poland
  group_by(player.name, na.rm = TRUE) %>% # group for each player
  summarise(shots = sum(type.name=="Shot", na.rm = TRUE), # amount of shots per player
            goals = sum(shot.outcome.name=="Goal", na.rm = TRUE), # amount of goals per player
            shots_per_game = sum(type.name=="Shot", na.rm = TRUE)/n_distinct(match_id), # shots per game per player
            goals_per_game = sum(shot.outcome.name=="Goal", na.rm = TRUE)/n_distinct(match_id), # goals per game per player
            xG = sum(shot.statsbomb_xg, na.rm = TRUE), #xG per player
            xG_per_game = sum(shot.statsbomb_xg, na.rm = TRUE)/n_distinct(match_id),
            games = n_distinct(match_id)) # xG per player per game

d_shots_players <- d_shots_players[d_shots_players$shots != 0,]

# plot shots per player
ggplot(data = d_shots_players,
 aes(x = reorder(player.name, shots), y = shots)) +
  geom_bar(stat = "identity", width = 0.5) + 
  ggtitle("Shots per player") +
  scale_y_continuous( expand = c(0,0), breaks = 1:max(d_shots_players$shots)) +
  coord_flip() +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank())

# plot xG per player
ggplot(data = d_shots_players,
 aes(x = reorder(player.name, xG), y = xG)) +
  geom_bar(stat = "identity", width = 0.5) + 
  ggtitle("xG per player") +
  scale_y_continuous( expand = c(0,0), breaks = 0:max(d_shots_players$xG)) +
  coord_flip() +
  scale_fill_brewer(palette = "Dark2") +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank())
```

Shots against Poland

```{r}
create_Pitch(goaltype = "box") +
  geom_point(data = d[d$team.id != 789 & d$type.id == 16,], aes(x = location.x, y = location.y, 
                                 colour = opponent, 
                                 size = shot.statsbomb_xg,
                                 shape = factor(shot.outcome.name))) +
  ggtitle("Shots - Poland World Cup 2022") +
  labs(colour = "Opponent", shape = "Outcome") +
  guides(size = "none") +
  scale_colour_brewer(palette = "Dark2") +
  scale_y_reverse() +
  theme(plot.title = element_text(hjust = 1,vjust = -2),
        plot.background = element_rect(fill = "#F9F9F9"))
```

## Passes

Here we look at passes of Polish team during World Cup

First we look at amount of passes (successful and not successful) by each player.\
\
I assume that have NA in the pass.outcome variable are accurate. I couldn't find the info in the documentation.

```{r}
d_pass_players <- d %>%
  filter(team.id == 789) %>% # select Poland
  group_by(player.name, na.rm = TRUE) %>% # group for each player
  mutate(pass.succesful = case_when(is.na(pass.outcome.id) ~ 1,
                                    TRUE ~ 0)) %>% # add a column to calculate the accuracy of the pass
  summarise(passes = sum(type.name == "Pass", na.rm = TRUE), # amount of passes per player
            passes_per_game = sum(type.name == "Pass", na.rm = TRUE)/n_distinct(match_id), # passes per game per player
            succesful_passes = sum(type.name == "Pass" & pass.succesful == 1, na.rm = TRUE), # amount of succesful passes per player
            succesful_passes_per_game = sum(type.name == "Pass" & pass.succesful == 1, na.rm = TRUE)/n_distinct(match_id), # succesful passes per game per player
            unsuccesful_passes = sum(type.name == "Pass" & pass.succesful == 0, na.rm = TRUE), # amount of unsuccesful passes per player
            unsuccesful_passes_per_game = sum(type.name == "Pass" & pass.succesful == 0, na.rm = TRUE)/n_distinct(match_id), # unsuccesful passes per game per player
            games = n_distinct(match_id)) %>% # xG per player per game
  pivot_longer(
    cols = c(succesful_passes,unsuccesful_passes),
    names_to = 'pass_accuracy',
    values_to = 'passes_count'
  )
#remove empty row
d_pass_players <- d_pass_players[d_pass_players$passes != 0,]

# plot passes per player
ggplot(data = d_pass_players,
 aes(x = reorder(player.name, passes), y = passes_count, fill = pass_accuracy)) +
  geom_bar(stat = "identity", width = 0.5) + 
  ggtitle("Passes per player") +
  scale_y_continuous( expand = c(0,0)) +
  scale_fill_brewer(palette = "Dark2",name = "Passes", labels = c("Succesful", "Unsuccesful")) +
  coord_flip() +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank())

```

All passes of one player. I will use Piotr Zieliński but script can be used to plot any player.

```{r}
player_to_plot <- "Piotr Zieliński"

d <- d %>%
  mutate(pass.succesful = case_when(is.na(pass.outcome.id) ~ 1,
                                    TRUE ~ 0)) # add a column to calculate the accuracy of the pass

create_Pitch(goaltype = "box") +
  geom_segment(data = d[d$type.name == "Pass" & d$player.name == player_to_plot,], aes(x = location.x, y = location.y, xend = pass.end_location.x, yend = pass.end_location.y, colour = fct_rev(factor(pass.succesful))), lineend = "round", linewidth = 0.5, arrow = arrow(length = unit(0.07, "inches"), ends = "last", type = "open")) +
  labs(title = paste(player_to_plot, " Passes"), subtitle = "World Cup 2022") +
  scale_colour_brewer(palette = "Dark2",name = "Outcome", labels = c("Succesful", "Unsuccesful")) +
  scale_y_reverse() + 
  theme(plot.background = element_rect(fill = "#F9F9F9"),
        plot.title = element_text(vjust = -1))
```

## Possession

I look at which parts of the pitch team had most possession. \
Possessions are defined as any event with location.

```{r}
heatmap = d %>%mutate(location.x = ifelse(location.x>120, 120, location.x),
                      location.y = ifelse(location.y>80, 80, location.y),
                      location.x = ifelse(location.x<0, 0, location.x),
                      location.y = ifelse(location.y<0, 0, location.y)) # force out of pitch location into the pitch

# create bins in the x and y dimensions
heatmap$xbin <- cut(heatmap$location.x, breaks = seq(from=0, to=120, by = 10),include.lowest=TRUE )
heatmap$ybin <- cut(heatmap$location.y, breaks = seq(from=0, to=80, by = 10),include.lowest=TRUE)

heatmap = heatmap %>% 
  filter(possession_team.name == team_to_analyze) %>% # take only possesion of the selected team
  drop_na(location.y, location.x) %>% # drop rows without location information
  mutate(total_possesion = n()) %>% #calculate total_amount of possesions
  group_by(xbin, ybin) %>%
  summarise(bin_possesion = n(),
            location.x = median(location.x),
            location.y = median(location.y))

ggplot(heatmap, aes(location.x, location.y, fill= bin_possesion, group = bin_possesion)) + 
   geom_bin2d(binwidth = c(10, 10), position = "identity", alpha = 0.9) +
  annotate("rect",xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
  annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
 annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "white", size = 0.6) +
 annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "white", size = 0.6) +
 annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "white", size = 0.6) +
 annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "white", size = 0.6) +
 annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
 annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
 annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "white", size = 0.6)+
 annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
 annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6) +
  theme(rect = element_blank(),
        line = element_blank()) +
  annotate("point", x = 12 , y = 40, colour = "white", size = 1.05) +
  annotate("point", x = 108 , y = 40, colour = "white", size = 1.05) +
  annotate("path", colour = "white", size = 0.6, x=60+10*cos(seq(0,2*pi,length.out=2000)),y=40+10*sin(seq(0,2*pi,length.out=2000))) +
 annotate("point", x = 60 , y = 40, colour = "white", size = 1.05) +
 annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6, y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="white") + annotate("path", x=108-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6, y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="white") +
  theme(axis.text.x=element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        plot.caption=element_text(size=13,family="Source Sans Pro", hjust=0.5, vjust=0.5),
        plot.subtitle = element_text(size = 18, family="Source Sans Pro", hjust = 0.5),
        axis.text.y=element_blank(),
        legend.title = element_blank(),
        legend.text=element_text(size=22,family="Source Sans Pro"),
        legend.key.size = unit(1.5, "cm"),
        plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 32.5, family="Source Sans Pro", colour = "black", hjust = 0.5),
        legend.direction = "vertical",
        axis.ticks=element_blank(),
        plot.background = element_rect(fill = "white"),
        strip.text.x = element_text(size=13,family="Source Sans Pro")) +
  scale_y_reverse() +
  scale_fill_continuous(trans = 'reverse') +
  labs(title = "Possesions Poland") + 
  coord_fixed(ratio = 95/100) +
 guides(fill = guide_legend(reverse = TRUE))

```
